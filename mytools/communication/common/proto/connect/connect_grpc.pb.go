// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: connect.proto

package connect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InsecureConnect_ExchangePublicKeys_FullMethodName = "/connect.InsecureConnect/ExchangePublicKeys"
)

// InsecureConnectClient is the client API for InsecureConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InsecureConnectClient interface {
	ExchangePublicKeys(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error)
}

type insecureConnectClient struct {
	cc grpc.ClientConnInterface
}

func NewInsecureConnectClient(cc grpc.ClientConnInterface) InsecureConnectClient {
	return &insecureConnectClient{cc}
}

func (c *insecureConnectClient) ExchangePublicKeys(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error) {
	out := new(ExchangeResponse)
	err := c.cc.Invoke(ctx, InsecureConnect_ExchangePublicKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsecureConnectServer is the server API for InsecureConnect service.
// All implementations must embed UnimplementedInsecureConnectServer
// for forward compatibility
type InsecureConnectServer interface {
	ExchangePublicKeys(context.Context, *ExchangeRequest) (*ExchangeResponse, error)
	mustEmbedUnimplementedInsecureConnectServer()
}

// UnimplementedInsecureConnectServer must be embedded to have forward compatible implementations.
type UnimplementedInsecureConnectServer struct {
}

func (UnimplementedInsecureConnectServer) ExchangePublicKeys(context.Context, *ExchangeRequest) (*ExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePublicKeys not implemented")
}
func (UnimplementedInsecureConnectServer) mustEmbedUnimplementedInsecureConnectServer() {}

// UnsafeInsecureConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InsecureConnectServer will
// result in compilation errors.
type UnsafeInsecureConnectServer interface {
	mustEmbedUnimplementedInsecureConnectServer()
}

func RegisterInsecureConnectServer(s grpc.ServiceRegistrar, srv InsecureConnectServer) {
	s.RegisterService(&InsecureConnect_ServiceDesc, srv)
}

func _InsecureConnect_ExchangePublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsecureConnectServer).ExchangePublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InsecureConnect_ExchangePublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsecureConnectServer).ExchangePublicKeys(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InsecureConnect_ServiceDesc is the grpc.ServiceDesc for InsecureConnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InsecureConnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect.InsecureConnect",
	HandlerType: (*InsecureConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangePublicKeys",
			Handler:    _InsecureConnect_ExchangePublicKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect.proto",
}

const (
	SecureConnect_GetPSK_FullMethodName = "/connect.SecureConnect/GetPSK"
)

// SecureConnectClient is the client API for SecureConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecureConnectClient interface {
	GetPSK(ctx context.Context, in *PskRequest, opts ...grpc.CallOption) (*PskResponse, error)
}

type secureConnectClient struct {
	cc grpc.ClientConnInterface
}

func NewSecureConnectClient(cc grpc.ClientConnInterface) SecureConnectClient {
	return &secureConnectClient{cc}
}

func (c *secureConnectClient) GetPSK(ctx context.Context, in *PskRequest, opts ...grpc.CallOption) (*PskResponse, error) {
	out := new(PskResponse)
	err := c.cc.Invoke(ctx, SecureConnect_GetPSK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecureConnectServer is the server API for SecureConnect service.
// All implementations must embed UnimplementedSecureConnectServer
// for forward compatibility
type SecureConnectServer interface {
	GetPSK(context.Context, *PskRequest) (*PskResponse, error)
	mustEmbedUnimplementedSecureConnectServer()
}

// UnimplementedSecureConnectServer must be embedded to have forward compatible implementations.
type UnimplementedSecureConnectServer struct {
}

func (UnimplementedSecureConnectServer) GetPSK(context.Context, *PskRequest) (*PskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPSK not implemented")
}
func (UnimplementedSecureConnectServer) mustEmbedUnimplementedSecureConnectServer() {}

// UnsafeSecureConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecureConnectServer will
// result in compilation errors.
type UnsafeSecureConnectServer interface {
	mustEmbedUnimplementedSecureConnectServer()
}

func RegisterSecureConnectServer(s grpc.ServiceRegistrar, srv SecureConnectServer) {
	s.RegisterService(&SecureConnect_ServiceDesc, srv)
}

func _SecureConnect_GetPSK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureConnectServer).GetPSK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureConnect_GetPSK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureConnectServer).GetPSK(ctx, req.(*PskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecureConnect_ServiceDesc is the grpc.ServiceDesc for SecureConnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecureConnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect.SecureConnect",
	HandlerType: (*SecureConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPSK",
			Handler:    _SecureConnect_GetPSK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect.proto",
}
