// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: connect.proto

package connect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DefaultConnect_ExchangePublicKeys_FullMethodName = "/connect.DefaultConnect/ExchangePublicKeys"
)

// DefaultConnectClient is the client API for DefaultConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultConnectClient interface {
	ExchangePublicKeys(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error)
}

type defaultConnectClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultConnectClient(cc grpc.ClientConnInterface) DefaultConnectClient {
	return &defaultConnectClient{cc}
}

func (c *defaultConnectClient) ExchangePublicKeys(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error) {
	out := new(ExchangeResponse)
	err := c.cc.Invoke(ctx, DefaultConnect_ExchangePublicKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultConnectServer is the server API for DefaultConnect service.
// All implementations must embed UnimplementedDefaultConnectServer
// for forward compatibility
type DefaultConnectServer interface {
	ExchangePublicKeys(context.Context, *ExchangeRequest) (*ExchangeResponse, error)
	mustEmbedUnimplementedDefaultConnectServer()
}

// UnimplementedDefaultConnectServer must be embedded to have forward compatible implementations.
type UnimplementedDefaultConnectServer struct {
}

func (UnimplementedDefaultConnectServer) ExchangePublicKeys(context.Context, *ExchangeRequest) (*ExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePublicKeys not implemented")
}
func (UnimplementedDefaultConnectServer) mustEmbedUnimplementedDefaultConnectServer() {}

// UnsafeDefaultConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultConnectServer will
// result in compilation errors.
type UnsafeDefaultConnectServer interface {
	mustEmbedUnimplementedDefaultConnectServer()
}

func RegisterDefaultConnectServer(s grpc.ServiceRegistrar, srv DefaultConnectServer) {
	s.RegisterService(&DefaultConnect_ServiceDesc, srv)
}

func _DefaultConnect_ExchangePublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultConnectServer).ExchangePublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultConnect_ExchangePublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultConnectServer).ExchangePublicKeys(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultConnect_ServiceDesc is the grpc.ServiceDesc for DefaultConnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultConnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect.DefaultConnect",
	HandlerType: (*DefaultConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangePublicKeys",
			Handler:    _DefaultConnect_ExchangePublicKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect.proto",
}

const (
	WgConnect_GetPSK_FullMethodName = "/connect.WgConnect/GetPSK"
)

// WgConnectClient is the client API for WgConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WgConnectClient interface {
	GetPSK(ctx context.Context, in *PskRequest, opts ...grpc.CallOption) (*PskResponse, error)
}

type wgConnectClient struct {
	cc grpc.ClientConnInterface
}

func NewWgConnectClient(cc grpc.ClientConnInterface) WgConnectClient {
	return &wgConnectClient{cc}
}

func (c *wgConnectClient) GetPSK(ctx context.Context, in *PskRequest, opts ...grpc.CallOption) (*PskResponse, error) {
	out := new(PskResponse)
	err := c.cc.Invoke(ctx, WgConnect_GetPSK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WgConnectServer is the server API for WgConnect service.
// All implementations must embed UnimplementedWgConnectServer
// for forward compatibility
type WgConnectServer interface {
	GetPSK(context.Context, *PskRequest) (*PskResponse, error)
	mustEmbedUnimplementedWgConnectServer()
}

// UnimplementedWgConnectServer must be embedded to have forward compatible implementations.
type UnimplementedWgConnectServer struct {
}

func (UnimplementedWgConnectServer) GetPSK(context.Context, *PskRequest) (*PskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPSK not implemented")
}
func (UnimplementedWgConnectServer) mustEmbedUnimplementedWgConnectServer() {}

// UnsafeWgConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WgConnectServer will
// result in compilation errors.
type UnsafeWgConnectServer interface {
	mustEmbedUnimplementedWgConnectServer()
}

func RegisterWgConnectServer(s grpc.ServiceRegistrar, srv WgConnectServer) {
	s.RegisterService(&WgConnect_ServiceDesc, srv)
}

func _WgConnect_GetPSK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgConnectServer).GetPSK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WgConnect_GetPSK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgConnectServer).GetPSK(ctx, req.(*PskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WgConnect_ServiceDesc is the grpc.ServiceDesc for WgConnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WgConnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect.WgConnect",
	HandlerType: (*WgConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPSK",
			Handler:    _WgConnect_GetPSK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect.proto",
}
